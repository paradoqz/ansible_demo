---
- s1: introduction:
    - histoire + usage + prérequis (python, ssh?) + avantage/intérêt du produit
  s2: contexte:
    - schéma de l'infrastructure utilisée pour la démo
  s3: principe de fonctionnement:
    - ansible.cfg, inventaire, modules, roles (cf. s10)
  s4: modules:
    - écrits en python
    - possible d'écrire ses propres modules
    - https://docs.ansible.com/ansible/2.9/modules/list_of_all_modules.html
    - ansible-doc <module> = page de manuel
  s5: inventaire:
    - machines
    - groupes
    - groupes de groupe
    - variables
  s6: commandes Ad-Hoc:
        - ping, copy, command, shell, teaser winrm:
          - sur tout l'inventaire (ping avec windows + centos1 foireux)
          - sur un groupe de machines (copy / command(ls) + cat) \
              s5_exemple1 vers ~/exemple1 --- mémo args copy > src et dest
          - sur une machine (créer exemple 2)
          - modules + remote access spécifiques pour windows 
  s7: scripts Ansible - les playbooks:
    - executer exemple1 puis checker le playbook avec le linter \
        pour voir qu'il est pourri
    - analyser/exécuter exemple2 + debug
  s8: conditions, handlers et templates:
    - gathering facts
    - déploiement apache en fonction de la distribution Linux \
      avec index.html valorisé en fonction de l'hôte
      - installer le package apache
      - déployer le fichier de conf
      - ouvrir le port sur le firewall
      - redémarrer apache
      - recharger le firewall
  s9: roles:
    - mémo -> créer le rôle en live
    - découplage d'un playbook
    - rendre le code réutilisable
    PS: import & include, m'enfin, il sera déjà 15h
  s10: awx intro:
    - install via docker cf. Repo ansible/ansible -b 17.1 + description inventaire et exécution du playbook
    - présentation rapide de la console en tant qu'admin
  s11: awx - exécuter un playbook:
    - exécution du playbook demo en tant qu'opérateur
...